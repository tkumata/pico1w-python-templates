# SSD1351 OLED Display Driver for MicroPython
# Based on various open-source implementations

import time

from machine import Pin
from micropython import const

# Constants for SSD1351 commands
SSD1351_CMD_SETCOLUMN = const(0x15)
SSD1351_CMD_SETROW = const(0x75)
SSD1351_CMD_WRITERAM = const(0x5C)
SSD1351_CMD_READRAM = const(0x5D)
SSD1351_CMD_SETREMAP = const(0xA0)
SSD1351_CMD_STARTLINE = const(0xA1)
SSD1351_CMD_DISPLAYOFFSET = const(0xA2)
SSD1351_CMD_DISPLAYALLOFF = const(0xA4)
SSD1351_CMD_DISPLAYALLON = const(0xA5)
SSD1351_CMD_NORMALDISPLAY = const(0xA6)
SSD1351_CMD_INVERTDISPLAY = const(0xA7)
SSD1351_CMD_FUNCTIONSELECT = const(0xAB)
SSD1351_CMD_DISPLAYOFF = const(0xAE)
SSD1351_CMD_DISPLAYON = const(0xAF)
SSD1351_CMD_PRECHARGE = const(0xB1)
SSD1351_CMD_DISPLAYENHANCE = const(0xB2)
SSD1351_CMD_CLOCKDIV = const(0xB3)
SSD1351_CMD_SETVSL = const(0xB4)
SSD1351_CMD_SETGPIO = const(0xB5)
SSD1351_CMD_PRECHARGE2 = const(0xB6)
SSD1351_CMD_SETGRAY = const(0xB8)
SSD1351_CMD_USELUT = const(0xB9)
SSD1351_CMD_PRECHARGELEVEL = const(0xBB)
SSD1351_CMD_VCOMH = const(0xBE)
SSD1351_CMD_CONTRASTABC = const(0xC1)
SSD1351_CMD_CONTRASTMASTER = const(0xC7)
SSD1351_CMD_MUXRATIO = const(0xCA)
SSD1351_CMD_COMMANDLOCK = const(0xFD)
SSD1351_CMD_HORIZSCROLL = const(0x96)
SSD1351_CMD_STOPSCROLL = const(0x9E)
SSD1351_CMD_STARTSCROLL = const(0x9F)


class SSD1351:
    def __init__(self, width, height, spi, dc, cs, rst, rate=10000000):
        self.width = width
        self.height = height
        self.spi = spi
        self.dc = dc
        self.cs = cs
        self.rst = rst
        self.rate = rate
        self.buffer = bytearray(width * height * 2)
        self.cs.init(Pin.OUT, value=1)
        self.dc.init(Pin.OUT, value=0)
        self.rst.init(Pin.OUT, value=1)
        self.init_display()

    def init_display(self):
        self.reset()

        # Unlock the display
        self.write_cmd(SSD1351_CMD_COMMANDLOCK)
        self.write_data(0x12)

        self.write_cmd(SSD1351_CMD_COMMANDLOCK)
        self.write_data(0xB1)

        # Display off
        self.write_cmd(SSD1351_CMD_DISPLAYOFF)

        # Set clock div
        self.write_cmd(SSD1351_CMD_CLOCKDIV)
        self.write_data(0xF1)  # 7:4 = Oscillator Freq, 3:0 = CLK Div Ratio

        # Set MUX ratio
        self.write_cmd(SSD1351_CMD_MUXRATIO)
        self.write_data(0x7F)  # 127

        # Set display offset
        self.write_cmd(SSD1351_CMD_DISPLAYOFFSET)
        self.write_data(0x00)

        # Set start line
        self.write_cmd(SSD1351_CMD_STARTLINE)
        self.write_data(0x00)

        # Set remap
        self.write_cmd(SSD1351_CMD_SETREMAP)
        self.write_data(0x74)  # Color depth and rotation settings

        # Set GPIO
        self.write_cmd(SSD1351_CMD_SETGPIO)
        self.write_data(0x00)

        # Function select
        self.write_cmd(SSD1351_CMD_FUNCTIONSELECT)
        self.write_data(0x01)  # Internal VDD regulator

        # Set VSL
        self.write_cmd(SSD1351_CMD_SETVSL)
        self.write_data(0xA0)
        self.write_data(0xB5)
        self.write_data(0x55)

        # Set contrast
        self.write_cmd(SSD1351_CMD_CONTRASTABC)
        self.write_data(0xC8)
        self.write_data(0x80)
        self.write_data(0xC8)

        self.write_cmd(SSD1351_CMD_CONTRASTMASTER)
        self.write_data(0x0F)

        # Set precharge
        self.write_cmd(SSD1351_CMD_PRECHARGE)
        self.write_data(0x32)

        self.write_cmd(SSD1351_CMD_PRECHARGE2)
        self.write_data(0x01)

        # Set VCOMH
        self.write_cmd(SSD1351_CMD_VCOMH)
        self.write_data(0x05)

        # Normal display mode
        self.write_cmd(SSD1351_CMD_NORMALDISPLAY)

        # Clear screen
        self.fill(0)
        self.show()

        # Turn on the display
        self.write_cmd(SSD1351_CMD_DISPLAYON)

    def reset(self):
        self.rst.value(1)
        time.sleep_ms(50)
        self.rst.value(0)
        time.sleep_ms(50)
        self.rst.value(1)
        time.sleep_ms(50)

    def write_cmd(self, cmd):
        self.dc.value(0)  # Command mode
        self.cs.value(0)  # Select display
        self.spi.write(bytes([cmd]))
        self.cs.value(1)  # Deselect display

    def write_data(self, data):
        self.dc.value(1)  # Data mode
        self.cs.value(0)  # Select display
        self.spi.write(bytes([data]))
        self.cs.value(1)  # Deselect display

    def write_data_buf(self, buf):
        self.dc.value(1)  # Data mode
        self.cs.value(0)  # Select display
        self.spi.write(buf)
        self.cs.value(1)  # Deselect display

    def set_addr_window(self, x0, y0, x1, y1):
        self.write_cmd(SSD1351_CMD_SETCOLUMN)
        self.write_data(x0)
        self.write_data(x1)

        self.write_cmd(SSD1351_CMD_SETROW)
        self.write_data(y0)
        self.write_data(y1)

        self.write_cmd(SSD1351_CMD_WRITERAM)

    def color565(self, r, g, b):
        return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3)

    def pixel(self, x, y, color):
        if 0 <= x < self.width and 0 <= y < self.height:
            idx = (y * self.width + x) * 2
            self.buffer[idx] = color >> 8
            self.buffer[idx + 1] = color & 0xFF

    def fill(self, color):
        for i in range(0, len(self.buffer), 2):
            self.buffer[i] = color >> 8
            self.buffer[i + 1] = color & 0xFF

    def fill_rect(self, x, y, w, h, color):
        for _y in range(y, y + h):
            for _x in range(x, x + w):
                self.pixel(_x, _y, color)

    def hline(self, x, y, w, color):
        self.fill_rect(x, y, w, 1, color)

    def vline(self, x, y, h, color):
        self.fill_rect(x, y, 1, h, color)

    def rect(self, x, y, w, h, color):
        self.hline(x, y, w, color)
        self.hline(x, y + h - 1, w, color)
        self.vline(x, y, h, color)
        self.vline(x + w - 1, y, h, color)

    def text(self, text, x, y, color, font=None, size=1):
        font_chars = [
            [0x00, 0x00, 0x00, 0x00, 0x00],  # space 0x20
            [0x00, 0x00, 0x5F, 0x00, 0x00],  # ! 0x21
            [0x00, 0x07, 0x00, 0x07, 0x00],  # " 0x22
            [0x14, 0x7F, 0x14, 0x7F, 0x14],  # # 0x23
            [0x24, 0x2A, 0x7F, 0x2A, 0x12],  # $ 0x24
            [0x23, 0x13, 0x08, 0x64, 0x62],  # % 0x25
            [0x36, 0x49, 0x55, 0x22, 0x50],  # & 0x26
            [0x00, 0x05, 0x03, 0x00, 0x00],  # ' 0x27
            [0x00, 0x1C, 0x22, 0x41, 0x00],  # ( 0x28
            [0x00, 0x41, 0x22, 0x1C, 0x00],  # ) 0x29
            [0x14, 0x08, 0x3E, 0x08, 0x14],  # * 0x2A
            [0x08, 0x08, 0x3E, 0x08, 0x08],  # + 0x2B
            [0x00, 0x50, 0x30, 0x00, 0x00],  # , 0x2C
            [0x08, 0x08, 0x08, 0x08, 0x08],  # - 0x2D
            [0x00, 0x60, 0x60, 0x00, 0x00],  # . 0x2E
            [0x20, 0x10, 0x08, 0x04, 0x02],  # / 0x2F
            [0x3E, 0x51, 0x49, 0x45, 0x3E],  # 0 0x30
            [0x00, 0x42, 0x7F, 0x40, 0x00],  # 1 0x31
            [0x42, 0x61, 0x51, 0x49, 0x46],  # 2 0x32
            [0x21, 0x41, 0x45, 0x4B, 0x31],  # 3 0x33
            [0x18, 0x14, 0x12, 0x7F, 0x10],  # 4 0x34
            [0x27, 0x45, 0x45, 0x45, 0x39],  # 5 0x35
            [0x3C, 0x4A, 0x49, 0x49, 0x30],  # 6 0x36
            [0x01, 0x71, 0x09, 0x05, 0x03],  # 7 0x37
            [0x36, 0x49, 0x49, 0x49, 0x36],  # 8 0x38
            [0x06, 0x49, 0x49, 0x29, 0x1E],  # 9 0x39
            [0x00, 0x36, 0x36, 0x00, 0x00],  # : 0x3A
            [0x00, 0x56, 0x36, 0x00, 0x00],  # ; 0x3B
            [0x08, 0x14, 0x22, 0x41, 0x00],  # < 0x3C
            [0x14, 0x14, 0x14, 0x14, 0x14],  # = 0x3D
            [0x00, 0x41, 0x22, 0x14, 0x08],  # > 0x3E
            [0x02, 0x01, 0x51, 0x09, 0x06],  # ? 0x3F
            [0x32, 0x49, 0x79, 0x41, 0x3E],  # @ 0x40
            [0x7E, 0x11, 0x11, 0x11, 0x7E],  # A 0x41
            [0x7F, 0x49, 0x49, 0x49, 0x36],  # B 0x42
            [0x3E, 0x41, 0x41, 0x41, 0x22],  # C 0x43
            [0x7F, 0x41, 0x41, 0x22, 0x1C],  # D 0x44
            [0x7F, 0x49, 0x49, 0x49, 0x41],  # E 0x45
            [0x7F, 0x09, 0x09, 0x09, 0x01],  # F 0x46
            [0x3E, 0x41, 0x49, 0x49, 0x7A],  # G 0x47
            [0x7F, 0x08, 0x08, 0x08, 0x7F],  # H 0x48
            [0x00, 0x41, 0x7F, 0x41, 0x00],  # I 0x49
            [0x20, 0x40, 0x41, 0x3F, 0x01],  # J 0x4A
            [0x7F, 0x08, 0x14, 0x22, 0x41],  # K 0x4B
            [0x7F, 0x40, 0x40, 0x40, 0x40],  # L 0x4C
            [0x7F, 0x02, 0x0C, 0x02, 0x7F],  # M 0x4D
            [0x7F, 0x04, 0x08, 0x10, 0x7F],  # N 0x4E
            [0x3E, 0x41, 0x41, 0x41, 0x3E],  # O 0x4F
            [0x7F, 0x09, 0x09, 0x09, 0x06],  # P 0x50
            [0x3E, 0x41, 0x51, 0x21, 0x5E],  # Q 0x51
            [0x7F, 0x09, 0x19, 0x29, 0x46],  # R 0x52
            [0x46, 0x49, 0x49, 0x49, 0x31],  # S 0x53
            [0x01, 0x01, 0x7F, 0x01, 0x01],  # T 0x54
            [0x3F, 0x40, 0x40, 0x40, 0x3F],  # U 0x55
            [0x1F, 0x20, 0x40, 0x20, 0x1F],  # V 0x56
            [0x3F, 0x40, 0x38, 0x40, 0x3F],  # W 0x57
            [0x63, 0x14, 0x08, 0x14, 0x63],  # X 0x58
            [0x07, 0x08, 0x70, 0x08, 0x07],  # Y 0x59
            [0x61, 0x51, 0x49, 0x45, 0x43],  # Z 0x5A
            [0x00, 0x7F, 0x41, 0x41, 0x00],  # [ 0x5B
            [0x02, 0x04, 0x08, 0x10, 0x20],  # \ 0x5C
            [0x00, 0x41, 0x41, 0x7F, 0x00],  # ] 0x5D
            [0x04, 0x02, 0x01, 0x02, 0x04],  # ^ 0x5E
            [0x40, 0x40, 0x40, 0x40, 0x40],  # _ 0x5F
            [0x00, 0x01, 0x02, 0x04, 0x00],  # ` 0x60
            [0x20, 0x54, 0x54, 0x54, 0x78],  # a 0x61
            [0x7F, 0x48, 0x44, 0x44, 0x38],  # b 0x62
            [0x38, 0x44, 0x44, 0x44, 0x20],  # c 0x63
            [0x38, 0x44, 0x44, 0x48, 0x7F],  # d 0x64
            [0x38, 0x54, 0x54, 0x54, 0x18],  # e 0x65
            [0x08, 0x7E, 0x09, 0x01, 0x02],  # f 0x66
            [0x0C, 0x52, 0x52, 0x52, 0x3E],  # g 0x67
            [0x7F, 0x08, 0x04, 0x04, 0x78],  # h 0x68
            [0x00, 0x44, 0x7D, 0x40, 0x00],  # i 0x69
            [0x20, 0x40, 0x44, 0x3D, 0x00],  # j 0x6A
            [0x7F, 0x10, 0x28, 0x44, 0x00],  # k 0x6B
            [0x00, 0x41, 0x7F, 0x40, 0x00],  # l 0x6C
            [0x7C, 0x04, 0x18, 0x04, 0x78],  # m 0x6D
            [0x7C, 0x08, 0x04, 0x04, 0x78],  # n 0x6E
            [0x38, 0x44, 0x44, 0x44, 0x38],  # o 0x6F
            [0x7C, 0x14, 0x14, 0x14, 0x08],  # p 0x70
            [0x08, 0x14, 0x14, 0x18, 0x7C],  # q 0x71
            [0x7C, 0x08, 0x04, 0x04, 0x08],  # r 0x72
            [0x48, 0x54, 0x54, 0x54, 0x20],  # s 0x73
            [0x04, 0x3F, 0x44, 0x40, 0x20],  # t 0x74
            [0x3C, 0x40, 0x40, 0x20, 0x7C],  # u 0x75
            [0x1C, 0x20, 0x40, 0x20, 0x1C],  # v 0x76
            [0x3C, 0x40, 0x30, 0x40, 0x3C],  # w 0x77
            [0x44, 0x28, 0x10, 0x28, 0x44],  # x 0x78
            [0x0C, 0x50, 0x50, 0x50, 0x3C],  # y 0x79
            [0x44, 0x64, 0x54, 0x4C, 0x44],  # z 0x7A
            [0x00, 0x08, 0x36, 0x41, 0x00],  # { 0x7B
            [0x00, 0x00, 0x7F, 0x00, 0x00],  # | 0x7C
            [0x00, 0x41, 0x36, 0x08, 0x00],  # } 0x7D
            [0x10, 0x08, 0x08, 0x10, 0x08],  # ~ 0x7E
        ]
        # Basic implementation
        # You might want to replace with a better font implementation
        for i, c in enumerate(text):
            if ord(c) < 32 or ord(c) > 126:
                continue
            char_data = font_chars[ord(c) - 32] if ord(c) - 32 < len(font_chars) else [0x00, 0x00, 0x00, 0x00, 0x00]
            for col in range(5):
                for row in range(8):
                    if char_data[col] & (1 << row):
                        self.pixel(x + i * 6 + col, y + row, color)

    def show(self):
        self.set_addr_window(0, 0, self.width - 1, self.height - 1)
        self.write_data_buf(self.buffer)
